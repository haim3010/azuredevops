# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: Build Application
    jobs:
      - job: Build
        pool:
          vmImage: 'windows-latest'
        steps:           
        - task: DotNetCoreCLI@2
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'
        - task: DotNetCoreCLI@2
          displayName: 'Build Solution'
          inputs:
            command: 'build'
            projects: '$(solution)'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: 'test'
            projects: '**/*[Tt]ests/*.csproj'
            arguments: '--configuration $(buildConfiguration) --collect "XPlat code coverage" --settings SampleWebApp/SampleWebApp.Tests/tests.runsettings'

        - task: PublishCodeCoverageResults@1
          displayName: "Publish code coverage results"
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: Publish  
          inputs:
            command: 'publish'
            publishWebProjects: true
            arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)' 

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        
        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: webapp_build
            
  - stage: DeployToDev
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy To Dev
        pool:
          vmImage: 'windows-latest'
        variables:
        - group: webapp-dev
        environment: dev       
        strategy:
          runOnce:
           deploy:
             steps:
               - download: current
                 artifact: webapp_build
               - task: AzureWebApp@1
                 inputs:
                  azureSubscription: 'AzureServiceConnection'
                  appType: 'webApp'
                  appName: 'dotnet-webapp-dev'
                  package: '$(Pipeline.Workspace)/**/*.zip'
                  appSettings: '-ConnectionStrings:DefaultConnection "$(ConnectionString)"'
                  deploymentMethod: 'auto'    
              
  - stage: DeployToQAE
    dependsOn: DeployToDev
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy To QAE
        pool:
          vmImage: 'windows-latest'
        variables:
        - group: webapp-qa
        environment: qae       
        strategy:
          runOnce:
           deploy:
             steps:
               - download: current
                 artifact: webapp_build
               - task: AzureWebApp@1
                 inputs:
                   azureSubscription: 'AzureServiceConnection'
                   appType: 'webApp'
                   appName: 'dotnet-webapp-qae'
                   package: '$(Pipeline.Workspace)/**/*.zip'
                   appSettings: '-ConnectionStrings:DefaultConnection "$(ConnectionString)"'
                   deploymentMethod: 'auto'



